/* AppleToo Disk object for Dos 3.3 disk consisting of:
 * 35 tracks per side
 * 16 sectors per track
 * 256 bytes per sector
 *
 * 4 phase stepper motor, 0-3
 * 0xc080 sm phase 0 off
 * 0xc081 sm phase 0 on
 * 0xc082 sm phase 1 off
 * 0xc083 sm phase 1 on
 * 0xc084 sm phase 2 off
 * 0xc085 sm phase 2 off
 * 0xc086 sm phase 3 off
 * 0xc087 sm phase 3 on
 * 0xc088 turn motor off
 * 0xc089 turn motor on
 * 0xc08a engage drive 1
 * 0xc08b engage drive 2
 * 0xc08c strobe data latch for i/o
 * 0xc08d load data latch
 * 0xc08e prepare latch for input
 * 0xc08f prepare latch for output
 * 
 * 0xc08e with 0xc08c Read
 * 0xc08e with 0xc08d Sense Write Protect
 * 0xc08f with 0xc08c Write
 * 0xc08f with 0xc08d Load Write Latch
 */


var DiskToo = function(appleToo, numDrives) {
  this.appleToo = appleToo;
  this.drives = [];
  this.currentDrive = 0;
  this.latch = 0;

  for (var i = 0; i < numDrives.length; i++) {
    this.drives.push({phase: 0});
  }
};

DiskToo.prototype.readDisk = function(diskData) {
  var buffer = [];
  diskData = diskData.replace(/\s+/g,"");
  
  for (var i=0; i < diskData.length; i += 2) {
    buffer[i] = parseInt(diskData.substr(i, 2), 16);
  }
};

var Disk = function() {
  this.track = 0;
  this.sector = 0;
};

function encode44(byte) {
  var evenByte = (byte | 0xAA),
      oddByte = (byte >> 1 | 0xAA);
  return [oddByte, evenByte];
}

function decode44(byteArray) {
  var evenByte = byteArray[1],
      oddByte = byteArray[0],
      byte = (evenByte & ((oddByte << 1) | 0x01));
  return byte;
}

var conversionTable63 = [
        0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C,
        0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10,
        0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD,
        0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0,
        0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,0xa9,0x00,0xea,0x88,
        0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C,
        0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3,
        0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0,
        0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD,
        0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40,
        0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,
        0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10,
        0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB,
        0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00,
        0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5,
        0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00
        ];

